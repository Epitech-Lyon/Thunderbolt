AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: thunderbolt - AWS SAM template

Parameters:
  Project:
    Type: String
    Default: thunderbolt

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 10
    Tags:
      Project: !Ref Project
    Environment:
      Variables:
        REGION: !Ref 'AWS::Region'

Resources:
  
  #############################################
  ######## EC2 handling Role & Lambda #########
  #############################################

  ec2LamdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "${Project}-ec2-LambdaRole"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          # Policy to have right to write in cloudwatch logs
          - PolicyName: LogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - PolicyName: ec2Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:StartInstances,
                    - ec2:StopInstances
                  Resource: "*"

  ec2LambdaFunction:
      Type: AWS::Serverless::Function
      Properties:
          FunctionName: !Sub "${Project}-ec2-handler"
          Description: EC2 start/stop
          CodeUri: src
          Handler: ec2-handler.handler
          Role: !GetAtt ec2LamdaRole.Arn
          Environment:
            Variables:
              Project: !Sub "${Project}"

  #############################################
  ######## RDS handling Role & Lambda #########
  #############################################

  rdsLamdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-rds-LambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Policy to have right to write in cloudwatch logs
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: rdsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:startDBInstance,
                  - rds:stopDBInstance,
                  - rds:modifyDBInstance
                Resource: "*"

  rdsLambdaFunction:
      Type: AWS::Serverless::Function
      Properties:
          FunctionName: !Sub "${Project}-rds-handler"
          Description: rds start/stop/modify
          CodeUri: src
          Handler: rds-handler.handler
          Role: !GetAtt rdsLamdaRole.Arn
          Environment:
            Variables:
              Project: !Sub "${Project}"
  
  ###################################################
  ######## AppStream handling Role & Lambda #########
  ###################################################

  appstreamLamdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-appstream-LambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Policy to have right to write in cloudwatch logs
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: appstreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appstream:startFleet,
                  - appstream:stopFleet
                Resource: "*"

  appstreamLambdaFunction:
      Type: AWS::Serverless::Function
      Properties:
          FunctionName: !Sub "${Project}-appstream-handler"
          Description: appstream fleet start/stop
          CodeUri: src
          Handler: appstream-handler.handler
          Role: !GetAtt appstreamLamdaRole.Arn
          Environment:
            Variables:
              Project: !Sub "${Project}"
